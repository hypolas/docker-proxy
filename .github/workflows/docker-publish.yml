name: Build and Publish Docker Image

on:
  push:
    tags:
      - v*.*.*      # Trigger on version tags (v1.0.0, v2.1.3, etc.)
      - v*.*.*-*    # Also support pre-release tags (v1.0.0-beta, v1.0.0-rc1, etc.)

env:
  DOCKER_IMAGE: hypolas/proxy-docker
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7

jobs:
  # Job 1: Tests and Quality Checks
  test:
    name: Tests & Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: |
          echo "🧪 Running Go tests..."
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Check test coverage
        run: |
          echo "📊 Test Coverage Report:"
          go tool cover -func=coverage.txt
          COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"

      # - name: Run linter (golangci-lint)
      #   uses: golangci/golangci-lint-action@v8
      #   with:
      #     version: v1.64
      #     args: --timeout=5m
      #     only-new-issues: false
      #     skip-cache: false
      #     skip-pkg-cache: false
      #     skip-build-cache: false

      - name: Build test binary
        run: |
          echo "🔨 Building test binary to verify compilation..."
          go build -v -o /tmp/dockershield-test ./cmd/dockershield
          echo "✅ Build successful"

  # Job 2: Build and Push Docker Image
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "❌ Error: Dockerfile not found in repository root"
            exit 1
          fi
          echo "✅ Dockerfile found"

      - name: Show Git ref info
        run: |
          echo "Git ref: ${{ github.ref }}"
          echo "Git ref name: ${{ github.ref_name }}"
          echo "Git ref type: ${{ github.ref_type }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            # Git tag v1.2.3 → Docker tag 1.2.3 (removes 'v' prefix)
            type=semver,pattern={{version}}
            # Git tag v1.2.3 → Docker tag 1.2 (major.minor)
            type=semver,pattern={{major}}.{{minor}}
            # Git tag v1.2.3 → Docker tag 1 (major only)
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            # Fallback for non-standard semver tags (e.g., v0.1.0-beta.01)
            type=match,pattern=v(.*),group=1
            # Always tag as 'latest' for stable releases (non-prerelease)
            type=raw,value=latest,enable=${{ !contains(github.ref, '-') }}

      - name: Debug - Show generated tags
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Generated labels:"
          echo "${{ steps.meta.outputs.labels }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Generate summary
        run: |
          echo "## 🐳 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.DOCKER_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Tags Created:**" >> $GITHUB_STEP_SUMMARY
          echo "> Note: The 'v' prefix is automatically removed from Docker tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ env.PLATFORMS }}\`" >> $GITHUB_STEP_SUMMARY

  # Job 3: Build Binaries for Multiple Platforms
  binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build binaries for multiple platforms
        run: |
          mkdir -p dist

          # Build for Linux amd64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -X main.GitCommit=${{ github.sha }}" -o dist/dockershield-linux-amd64 ./cmd/dockershield

          # Build for Linux arm64
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -X main.GitCommit=${{ github.sha }}" -o dist/dockershield-linux-arm64 ./cmd/dockershield

          # Build for Linux arm v7
          GOOS=linux GOARCH=arm GOARM=7 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -X main.GitCommit=${{ github.sha }}" -o dist/dockershield-linux-armv7 ./cmd/dockershield

          # Build for macOS amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -X main.GitCommit=${{ github.sha }}" -o dist/dockershield-darwin-amd64 ./cmd/dockershield

          # Build for macOS arm64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -X main.GitCommit=${{ github.sha }}" -o dist/dockershield-darwin-arm64 ./cmd/dockershield

          # Build for Windows amd64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -X main.GitCommit=${{ github.sha }}" -o dist/dockershield-windows-amd64.exe ./cmd/dockershield

          # Create checksums
          cd dist
          sha256sum * > checksums.txt
          cd ..

          # List built files
          ls -lh dist/

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/
          retention-days: 7

  # Job 4: Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [docker, binaries]

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🐳 Docker Socket Proxy ${{ github.ref_name }}

          Secure Docker Socket HTTP Proxy with advanced granular filtering for CI/CD pipelines.

          ### 📦 Installation

          #### Docker (Recommended)

          TCP:

          ```bash
          docker pull hypolas/proxy-docker:${GITHUB_REF_NAME#v}
          docker run -d --name dockershield \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -p 2375:2375 \
            -e CONTAINERS=1 -e IMAGES=1 \
            hypolas/proxy-docker:${GITHUB_REF_NAME#v}
          ```

          Socket:

          ```bash
          docker pull hypolas/proxy-docker:${GITHUB_REF_NAME#v}
          docker run -d --name dockershield \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v /tmp:/tmp \
            -e LISTEN_SOCKET=unix:///tmp/dockershield.sock \
            -e CONTAINERS=1 -e IMAGES=1 \
            hypolas/proxy-docker:${GITHUB_REF_NAME#v}
          ```


          #### Binary Download

          Download the appropriate binary for your platform below, make it executable, and run:

          ```bash
          # Linux amd64 example

          export DOCKER_HOST=unix:///var/run/docker.sock
          export LISTEN_SOCKET=unix:///tmp/dockershield.sock
          export CONTAINERS=1
          export IMAGES=1

          chmod +x dockershield-linux-amd64
          ./dockershield-linux-amd64
          ```

          ### 🏗️ Supported Platforms

          **Docker Images:**
          - linux/amd64 (x86_64)
          - linux/arm64 (ARM 64-bit)
          - linux/arm/v7 (ARM 32-bit)

          **Binaries:**
          - Linux amd64, arm64, armv7
          - macOS amd64, arm64 (Apple Silicon)
          - Windows amd64

          ### 📋 What's Changed

          See commit history for detailed changes.

          ### 📚 Documentation

          - [README](https://github.com/hypolas/dockershield/blob/main/README.md)
          - [Security Guide](https://github.com/hypolas/dockershield/blob/main/docs/SECURITY.md)
          - [Configuration](https://github.com/hypolas/dockershield/blob/main/docs/ENV_FILTERS.md)
          - [CI/CD Examples](https://github.com/hypolas/dockershield/blob/main/docs/CICD_EXAMPLES.md)

          ### 📞 Support

          - Report issues: https://github.com/hypolas/dockershield/issues
          - Email: nicolas.hypolite@gmail.com

          ---

          **Full Changelog**: https://github.com/hypolas/dockershield/commits/${{ github.ref_name }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          files: |
            dist/dockershield-linux-amd64
            dist/dockershield-linux-arm64
            dist/dockershield-linux-armv7
            dist/dockershield-darwin-amd64
            dist/dockershield-darwin-arm64
            dist/dockershield-windows-amd64.exe
            dist/checksums.txt
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate summary
        run: |
          echo "## 📦 GitHub Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** https://github.com/hypolas/dockershield/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Binaries:** 6 platforms + checksums" >> $GITHUB_STEP_SUMMARY
          echo "- Linux: amd64, arm64, armv7" >> $GITHUB_STEP_SUMMARY
          echo "- macOS: amd64, arm64" >> $GITHUB_STEP_SUMMARY
          echo "- Windows: amd64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Download:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Binary download from:" >> $GITHUB_STEP_SUMMARY
          echo "# https://github.com/hypolas/dockershield/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
