#!/bin/bash
# Script de test pour d√©montrer les conflits de configuration
set -e

echo "üß™ Test des Conflits de Configuration - dockershield"
echo "======================================================"
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction helper
test_case() {
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${YELLOW}Test: $1${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

result() {
    echo -e "${GREEN}‚úÖ R√©sultat: $1${NC}"
    echo ""
}

warning() {
    echo -e "${RED}‚ö†Ô∏è  Attention: $1${NC}"
    echo ""
}

# Test 1: Configuration par d√©faut
test_case "D√©fauts de s√©curit√© (sans configuration)"
echo "Commande:"
echo "  docker run --rm hypolas/proxy-docker:latest"
echo ""
echo "Configuration attendue:"
echo "  - Socket Docker BLOQU√â (/var/run/docker.sock)"
echo "  - Conteneur proxy PROT√âG√â"
echo "  - R√©seau proxy PROT√âG√â (si d√©fini)"
result "Les d√©fauts de s√©curit√© sont appliqu√©s"

# Test 2: JSON simple
test_case "Configuration JSON uniquement"
cat > /tmp/test-filters.json << 'EOF'
{
  "volumes": {
    "allowed_paths": ["/app", "/data"]
  }
}
EOF

echo "Fichier JSON:"
cat /tmp/test-filters.json
echo ""
echo "Commande:"
echo "  docker run --rm -v /tmp/test-filters.json:/filters.json \\"
echo "    -e FILTERS_CONFIG=/filters.json \\"
echo "    hypolas/proxy-docker:latest"
echo ""
result "allowed_paths=[/app, /data]"
warning "Les d√©fauts de Volumes sont REMPLAC√âS (socket Docker plus prot√©g√© !)"

# Test 3: ENV vs JSON
test_case "Conflit ENV vs JSON"
echo "JSON:"
cat /tmp/test-filters.json
echo ""
echo "ENV:"
echo "  DKRPRX__VOLUMES__DENIED_PATHS=/var/run/docker.sock,/tmp"
echo ""
echo "Commande:"
echo "  docker run --rm -v /tmp/test-filters.json:/filters.json \\"
echo "    -e FILTERS_CONFIG=/filters.json \\"
echo "    -e DKRPRX__VOLUMES__DENIED_PATHS=/var/run/docker.sock,/tmp \\"
echo "    hypolas/proxy-docker:latest"
echo ""
result "ENV GAGNE: denied_paths=[/var/run/docker.sock, /tmp]"
warning "allowed_paths du JSON est PERDU !"

# Test 4: Allowed vs Denied
test_case "Conflit Allowed vs Denied dans le m√™me filtre"
cat > /tmp/test-filters2.json << 'EOF'
{
  "volumes": {
    "denied_paths": ["/var"],
    "allowed_paths": ["/app", "/data"]
  }
}
EOF

echo "Configuration:"
cat /tmp/test-filters2.json
echo ""
echo "Tests de montage:"
echo "  1. /var/log     ‚Üí Matche denied (/var)"
echo "  2. /tmp         ‚Üí Ne matche ni denied ni allowed"
echo "  3. /app/config  ‚Üí Ne matche pas denied, matche allowed"
echo ""
result "1. BLOQU√â (denied v√©rifi√© en premier)"
result "2. BLOQU√â (pas dans allowed)"
result "3. AUTORIS√â ‚úÖ"

# Test 5: D√©sactivation des d√©fauts
test_case "DKRPRX__DISABLE_DEFAULTS=true"
echo "Commande:"
echo "  docker run --rm \\"
echo "    -e DKRPRX__DISABLE_DEFAULTS=true \\"
echo "    hypolas/proxy-docker:latest"
echo ""
warning "AUCUNE PROTECTION PAR D√âFAUT !"
warning "Le socket Docker n'est PLUS prot√©g√©"
warning "Le conteneur proxy n'est PLUS prot√©g√©"
echo ""
result "√Ä utiliser UNIQUEMENT si vous d√©finissez vos propres r√®gles"

# Test 6: ENV partiel avec d√©fauts
test_case "ENV partiel + D√©fauts actifs"
echo "Configuration:"
echo "  ENV: DKRPRX__CONTAINERS__DENIED_IMAGES=malicious/*"
echo "  (DKRPRX__DISABLE_DEFAULTS non d√©fini)"
echo ""
echo "R√©sultat:"
echo "  Containers:"
echo "    - denied_images: [malicious/*]        (de ENV)"
echo "    - denied_names:  [^dockershield$]     (de D√âFAUTS)"
echo "  Volumes:"
echo "    - denied_paths: [/var/run/docker.sock] (de D√âFAUTS)"
echo ""
result "Fusion: ENV pour Containers, D√©fauts pour Volumes et Networks"

# Test 7: JSON complet qui remplace les d√©fauts
test_case "JSON complet sans DISABLE_DEFAULTS"
cat > /tmp/test-filters3.json << 'EOF'
{
  "volumes": {
    "denied_paths": ["/sensitive"]
  },
  "containers": {
    "allowed_images": ["nginx:*", "redis:*"]
  },
  "networks": {
    "denied_names": ["public"]
  }
}
EOF

echo "JSON:"
cat /tmp/test-filters3.json
echo ""
echo "R√©sultat:"
echo "  Volumes:"
echo "    - denied_paths: [/sensitive]  (de JSON)"
echo "    - Les d√©fauts (/var/run/docker.sock) sont PERDUS !"
echo ""
echo "  Containers:"
echo "    - allowed_images: [nginx:*, redis:*]  (de JSON)"
echo "    - Les d√©fauts (^dockershield$) sont PERDUS !"
echo ""
warning "En d√©finissant une section dans JSON, vous perdez les d√©fauts de cette section !"

# R√©sum√©
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${YELLOW}üìã R√âSUM√â DES R√àGLES DE PRIORIT√â${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""
echo "1. ENV (DKRPRX__*) > JSON > D√©fauts"
echo "2. La fusion se fait PAR SECTION (pas par champ)"
echo "3. denied est v√©rifi√© AVANT allowed"
echo "4. DISABLE_DEFAULTS d√©sactive TOUS les d√©fauts"
echo ""
echo -e "${GREEN}‚úÖ Tests termin√©s${NC}"
echo ""
echo "üìö Pour plus de d√©tails: docs/CONFLICT_RESOLUTION.md"

# Cleanup
rm -f /tmp/test-filters.json /tmp/test-filters2.json /tmp/test-filters3.json
